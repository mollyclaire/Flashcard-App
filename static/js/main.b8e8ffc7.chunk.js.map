{"version":3,"sources":["Card/card.js","Button/button.js","Config/Firebase/db_config.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","question","answer","Button","drawCard","bind","this","onClick","Component","DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","app","firebase","initializeApp","database","ref","child","updateCard","state","cards","currentCard","currentCards","on","snap","push","id","key","val","setState","getRandomCard","Math","floor","random","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+UAoBeA,G,YAdF,SAACC,GAAD,OACT,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,YAAYD,EAAME,WAErC,yBAAKD,UAAU,QACX,yBAAKA,UAAU,UAAUD,EAAMG,aCahCC,G,kBAtBX,WAAYJ,GAAQ,IAAD,8BACf,4CAAMA,KAGLK,SAAW,EAAKA,SAASC,KAAd,gBAJG,E,wEAWfC,KAAKP,MAAMK,a,6BAERL,GACH,OACI,yBAAKC,UAAU,mBACX,4BAAQA,UAAU,MAAMO,QAASD,KAAKF,UAAtC,kB,GAjBKI,c,iBCHRC,G,MAAY,CACrBC,OAAQ,0CACRC,WAAY,yCACZC,YAAa,gDACbC,UAAW,yBACXC,cAAe,GACfC,kBAAmB,eACnBC,MAAO,wCCiEIC,E,YA7Db,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDmB,IAAMC,IAASC,cAAcX,GAClC,EAAKY,SAAW,EAAKH,IAAIG,WAAWC,MAAMC,MAAM,SAEhD,EAAKC,WAAa,EAAKA,WAAWnB,KAAhB,gBAElB,EAAKoB,MAAQ,CACbC,MAAO,GACPC,YAAa,IAVI,E,iFAcE,IAAD,OAEZC,EAAetB,KAAKmB,MAAMC,MAChCpB,KAAKe,SAASQ,GAAG,cAAe,SAAAC,GAC9BF,EAAaG,KAAK,CAChBC,GAAIF,EAAKG,IACThC,SAAU6B,EAAKI,MAAMjC,SACrBC,OAAQ4B,EAAKI,MAAMhC,SAErB,EAAKiC,SAAS,CACZT,MAAOE,EACPD,YAAa,EAAKS,cAAcR,S,oCAOxBA,GAEZ,OADWA,EAAaS,KAAKC,MAAMD,KAAKE,SAAWX,EAAaY,W,mCAKhE,IAAMZ,EAAetB,KAAKmB,MAAMC,MAChCpB,KAAK6B,SAAS,CACZR,YAAarB,KAAK8B,cAAcR,O,+BAKlC,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CAGAC,SAAUK,KAAKmB,MAAME,YAAY1B,SACjCC,OAAQI,KAAKmB,MAAME,YAAYzB,SAE/B,kBAAC,EAAD,CACAE,SAAUE,KAAKkB,kB,GAvDLhB,aCEEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b8e8ffc7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\n// In App.js, I will pass Card a piece of data that represents an indiviual card \n// (that I will get back from Firebase). The data that I will pass the card will be on props. \n\nconst Card = (props) => (\n    <div className=\"card-container\">\n        <div className=\"card\">\n            <div className=\"front\">\n                <div className=\"question\">{props.question}</div>\n            </div>\n            <div className=\"back\">\n                <div className=\"answer\">{props.answer}</div>\n            </div>\n        </div>\n        \n    </div>\n) \n\nexport default Card;\n","import React, { Component } from \"react\"; \nimport \"./button.css\";\n\nclass Button extends Component {\n    constructor(props) {\n        super(props);\n    // \"this\" needs to be defined (in order to be used in the onClick method below) \n    // and of course, represents our Button component\n    this.drawCard = this.drawCard.bind(this);\n    }\n\n    // I just want to update the state of App.js to get a new random card when the state is updated.\n    // So I will pass this method down on props and pass it on the button compenent in App.js.\n    // The onClick function will fire the drawCard method in App.js.\n    drawCard() {\n        this.props.drawCard();\n    }\n    render(props) {\n        return (\n            <div className=\"buttonContainer\">\n                <button className=\"btn\" onClick={this.drawCard}>Draw Card</button>\n            </div>\n        )\n    }\n}\n\nexport default Button;","export const DB_CONFIG = {\n    apiKey: \"AIzaSyATHSyzTZyAObCDiQc2wOguu0jbbwmQm_Q\",\n    authDomain: \"react-flashcards-8fbf5.firebaseapp.com\",\n    databaseURL: \"https://react-flashcards-8fbf5.firebaseio.com\",\n    projectId: \"react-flashcards-8fbf5\",\n    storageBucket: \"\",\n    messagingSenderId: \"641340848051\",\n    appId: \"1:641340848051:web:69cab00420e5d27c\"\n}","import React, { Component } from \"react\";\nimport './App.css';\nimport Card from \"./Card/card\";\nimport Button from \"./Button/button\";\nimport firebase from \"firebase/app\";\nimport \"firebase/database\";\n\nimport { DB_CONFIG } from \"./Config/Firebase/db_config\";\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child(\"cards\");\n\n    this.updateCard = this.updateCard.bind(this);\n\n    this.state = {\n    cards: [],\n    currentCard: {}\n  }\n}\n\n  componentDidMount() {\n    // currentCards is an array\n    const currentCards = this.state.cards;\n    this.database.on(\"child_added\", snap => {\n      currentCards.push({\n        id: snap.key,\n        question: snap.val().question,\n        answer: snap.val().answer\n      })\n      this.setState({\n        cards: currentCards,\n        currentCard: this.getRandomCard(currentCards)\n      })\n    })\n  }\n\n  // This method returns a random number between 0 and the number of current cards in the array. \n  // The number is returned as the index of the currentCards array and set in the variable \"card\".\n  getRandomCard(currentCards) {\n    var card = currentCards[Math.floor(Math.random() * currentCards.length)]\n    return (card);\n  }\n\n  updateCard() {\n    const currentCards = this.state.cards;\n    this.setState({\n      currentCard: this.getRandomCard(currentCards)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Card \n        // A random card is drawn from our array of currentCards (currentCard),\n        // and the property is pulled off of that and passed onto the Card component.\n        question={this.state.currentCard.question}\n        answer={this.state.currentCard.answer}\n        />\n        <Button \n        drawCard={this.updateCard}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}